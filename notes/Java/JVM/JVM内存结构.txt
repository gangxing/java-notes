https://www.cnblogs.com/ityouknow/p/5610232.html
JVM内存结构（运行时数据区）主要有三大块

---------线程共享----------
一、堆（内存）
老年代
年轻代：
        Eden:From Survivor:To Survivor = 8:1:1
存放对象和数组 所有线程共享

二、方法区（非堆、TODO 永久代？）
主要存储类信息、常量、静态变量等数据 是线程共享的区域
    运行时常量池，属于方法区的一部分 主要存放编译期生成的各种字面量和符号引用
    TODO 这里多深入一下

---------线程私有----------

三、程序计数器
存储的是下一条需要执行的字节码指令 如果是本地方法 则为null 虚拟机规范没有规定任何OOM的区域
当然是线程私有

四、栈：主要用于方法的执行
    1.Java虚拟机栈
    2.本地方法栈
 存放局部变量表、操作数栈、动态链接、方法出口等信息 每一个方法的执行对应着入栈和出栈
 线程私有 生命周期同线程的生命周期

五、直接内存
不是虚拟机规范定义的运行时数据区的一部分，但是会被NIO的Channel和Buffer调用Native函数直接分配堆外内存，然后通过存储在Java堆中的
DirectByteBuffer对象作为直接内存的引用进行操作
以为避免了在Java堆和Native堆中来回复制数据 所以效率较高
不受Java堆大小的限制，但是会受到机器总内存限制 超出后也会OOM




常用的内存大小控制参数
-Xms设置堆的最小空间大小。
-Xmx设置堆的最大空间大小。

-Xss设置每个线程的堆栈大小。

-XX:NewSize设置新生代最小空间大小。

-XX:MaxNewSize设置新生代最大空间大小。

-XX:PermSize设置永久代最小空间大小。

-XX:MaxPermSize设置永久代最大空间大小。



